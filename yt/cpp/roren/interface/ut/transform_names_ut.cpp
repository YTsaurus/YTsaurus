
#include <yt/cpp/roren/interface/roren.h>
#include <yt/cpp/roren/interface/private/dummy_pipeline.h>

#include <library/cpp/testing/gtest/gtest.h>

namespace NRoren {

////////////////////////////////////////////////////////////////////////////////

// Dummy pipeline. Pipeline that is never meant to run graphs but only construct them.

THashSet<TString> GetPipelineNames(const TPipeline& pipeline)
{
    class TVisitor : public NPrivate::IRawPipelineVisitor
    {
    public:
        THashSet<TString> Names;

    public:
        void OnTransform(NPrivate::TTransformNode* transform)
        {
            Names.insert(transform->GetName());
        }
    };

    auto rawPipeline = NPrivate::GetRawPipeline(pipeline);
    TVisitor visitor;
    NPrivate::TraverseInTopologicalOrder(rawPipeline, &visitor);
    return std::move(visitor.Names);
}

TEST(TTestTransformNames, Simple)
{
    auto pipeline = NPrivate::MakeDummyPipeline();
    pipeline
        | "MeaningfulRead" >> DummyRead<int>()
        | "MeaningfulParDo" >> ParDo([] (const int& foo) {
            return foo + 1;
        })
        | "MeaningfulWrite" >> DummyWrite<int>();

    auto actual = GetPipelineNames(pipeline);
    auto expected = THashSet<TString>{
        "MeaningfulRead",
        "MeaningfulParDo",
        "MeaningfulWrite",
    };
    EXPECT_EQ(actual, expected);
}

TEST(TTestTransformNames, AutoGeneratedNames)
{
    auto pipeline = NPrivate::MakeDummyPipeline();

    auto parDo = ParDo([] (const int& foo) {
            return foo + 1;
        });
    pipeline | DummyRead<int>() | parDo | parDo | parDo | DummyWrite<int>();
    pipeline | DummyRead<int>() | DummyWrite<int>();

    auto actual = GetPipelineNames(pipeline);
    auto expected = THashSet<TString>{
        "Read", "ParDo", "ParDo2", "ParDo3", "Write",
        "Read2", "Write2",
    };
    EXPECT_EQ(actual, expected);

}

class TMyCompositeTransform
{
public:
    TString GetName() const
    {
        return "MyCompositeTransform";
    }

    TPCollection<int> ApplyTo(const TPCollection<int>& pCollection) const
    {
        auto parDo = ParDo([] (const int& value) {
            return value + 1;
        });
        return pCollection
            | "OneParDo" >> parDo
            | "TwoParDo" >> parDo;
    }
};

TEST(TTestTransformNames, CompositeTransformNames)
{
    auto pipeline = NPrivate::MakeDummyPipeline();

    pipeline
        | DummyRead<int>()
        | TMyCompositeTransform{}
        | TMyCompositeTransform{}
        | "Foo" >> TMyCompositeTransform{}
        | DummyWrite<int>();

    auto actual = GetPipelineNames(pipeline);
    auto expected = THashSet<TString>{
        "Read",
        "MyCompositeTransform/OneParDo", "MyCompositeTransform/TwoParDo",
        "MyCompositeTransform2/OneParDo", "MyCompositeTransform2/TwoParDo",
        "Foo/OneParDo", "Foo/TwoParDo",
        "Write"
    };
    EXPECT_EQ(actual, expected);
}

////////////////////////////////////////////////////////////////////////////////

} // namespace NRoren
