// {{ autogen_marker }}
{%- set config -%}
    {%- if custom_config -%}
        {{ cpp_server_plugins_namespace }}::
    {%- endif-%}
    TMasterConfig
{%- endset %}
{%- set dynamic_config -%}
    {%- if custom_config -%}
        {{ cpp_server_plugins_namespace }}::
    {%- endif-%}
    TMasterDynamicConfig
{%- endset %}

#pragma once
{% if custom_config %}
#include <{{ cpp_server_plugins_path }}/public.h>
#include <{{ cpp_server_plugins_path }}/config.h>
{%- else %}
#include "public.h"
#include "config.h"
{%- endif %}

#include <yt/yt/orm/server/master/bootstrap.h>

#include <yt/yt/library/dynamic_config/dynamic_config_manager.h>

namespace {{ cpp_server_namespace }} {

////////////////////////////////////////////////////////////////////////////////

//! Manages dynamic configuration by pulling it periodically from Cypress.
/*!
 *  \note
 *  Thread affinity: any
 */
struct IDynamicConfigManager
    : public NYT::NDynamicConfig::TDynamicConfigManagerBase<{{ dynamic_config }}>
{
    using TDynamicConfigManagerBase<{{ dynamic_config }}>::TDynamicConfigManagerBase;
};

DEFINE_REFCOUNTED_TYPE(IDynamicConfigManager)

////////////////////////////////////////////////////////////////////////////////

IDynamicConfigManagerPtr CreateDynamicConfigManager(
    NYT::NOrm::NServer::NMaster::IBootstrap* bootstrap,
    const {{ config }}Ptr& config);

////////////////////////////////////////////////////////////////////////////////

} // namespace {{ cpp_server_namespace }}
