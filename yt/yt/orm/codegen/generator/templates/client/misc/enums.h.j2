// {{ autogen_marker }}

#pragma once

#include <library/cpp/yt/misc/enum.h>

namespace {{ client_misc_cpp_namespace }} {

////////////////////////////////////////////////////////////////////////////////

DEFINE_ENUM(EObjectType,
{%- if not yp_compatible %}
    ((Null)                                              (0))
{%- endif %}
{%- for object in objects | sort(attribute='type_value') %}
    {{ "((%s)%s(%d))" | format(object.camel_case_name, " " * [1, 50 - object.camel_case_name | length] | max, object.type_value) }}
{%- endfor %}
);

{%- for enum in public_enums | sort(attribute='name') %}
{%- set DEFINE -%}
    {%- if enum.string_serializable -%} DEFINE_STRING_SERIALIZABLE_ENUM {%- else -%} DEFINE_ENUM {%- endif -%}
{%- endset %}

{{ DEFINE }}({{enum.name}},
    {%- for v in enum.values | sort(attribute='number') %}
    (({{ v.cpp_enum_value_name }}) ({{ v.number }}))
    {%- endfor %}
);
{%- endfor %}

////////////////////////////////////////////////////////////////////////////////

TStringBuf FormatType(EObjectType v);

bool TryParseType(TStringBuf s, EObjectType* v);

////////////////////////////////////////////////////////////////////////////////

} // namespace {{ client_misc_cpp_namespace }}
