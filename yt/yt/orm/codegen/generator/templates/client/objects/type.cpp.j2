// {{ autogen_marker }}

#include "type.h"

#include <yt/yt/orm/client/objects/registry.h>

#include <mutex>

namespace {{ client_objects_cpp_namespace }} {

////////////////////////////////////////////////////////////////////////////////

NYT::NOrm::NClient::NObjects::IObjectTypeRegistryPtr CreateObjectTypeRegistry()
{
    return NYT::NOrm::NClient::NObjects::CreateObjectTypeRegistry(
        {
            {
    {%- if not yp_compatible %}
                .Value = 0,
    {%- else %}
                .Value = -1,
    {% endif %}
                .Name = "null",
                .HumanReadableName = "null",
                .CapitalizedHumanReadableName = "Null",
            },
    {%- for object in objects | sort(attribute="type_value") %}
            {
                .Value = {{ object.type_value }},
                .Name = "{{ object.snake_case_name }}",
                .HumanReadableName = "{{ object.human_readable_name }}",
                .CapitalizedHumanReadableName = "{{ object.human_readable_name | capitalize }}",
            },
    {%- endfor %}
        });
}

////////////////////////////////////////////////////////////////////////////////

void EnsureObjectTypeRegistryInitialized()
{
    // Prevent redundant initializations during unittests execution.
    static std::once_flag Initialized;
    std::call_once(Initialized, [] {
        NYT::NOrm::NClient::NObjects::SetGlobalObjectTypeRegistry(CreateObjectTypeRegistry());
    });
}

////////////////////////////////////////////////////////////////////////////////

} // namespace {{ client_objects_cpp_namespace }}
