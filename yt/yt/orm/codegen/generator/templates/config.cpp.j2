// {{ autogen_marker }}

#include "config.h"

#include <{{"yp/server/master" if yp_compatible else "yt/yt/orm/server"}}/access_control/config.h>

#include <{{cpp_server_plugins_path if custom_object_manager_config else "yt/yt/orm/server/objects"}}/config.h>

#include <yt/yt/core/yson/config.h>
{%- if not custom_dynamic_config_manager %}

#include <yt/yt/library/dynamic_config/config.h>
{%- endif %}

namespace {{ cpp_server_namespace }} {

////////////////////////////////////////////////////////////////////////////////

NYT::NOrm::NServer::NObjects::TObjectManagerConfigPtr TMasterConfig::GetObjectManagerConfig() const
{
    return ObjectManager;
}

NYT::NOrm::NServer::NAccessControl::TAccessControlManagerConfigPtr TMasterConfig::GetAccessControlManagerConfig() const
{
    return AccessControlManager;
}

void TMasterConfig::Register(TRegistrar registrar)
{
    NYT::NOrm::NServer::NMaster::TMasterConfig::DoRegister(registrar);

    registrar.UnrecognizedStrategy(NYT::NYTree::EUnrecognizedStrategy::KeepRecursive);

    registrar.Preprocessor([] (TThis* config) {
        config->DBName = DefaultDBName;
        auto protobufInteropConfig = config->GetSingletonConfig<NYT::NYson::TProtobufInteropConfig>();
        protobufInteropConfig->DefaultEnumYsonStorageType = NYT::NYson::EEnumYsonStorageType::{{ "String" if database_options.default_enum_storage_type == "string" else "Int" }};
    });

    registrar.Parameter("object_manager", &TThis::ObjectManager)
        .DefaultNew();
    registrar.Parameter("access_control_manager", &TThis::AccessControlManager)
        .DefaultNew();
    registrar.Parameter("yt_connector", &TThis::YTConnector)
        .DefaultNew();

{%- if not custom_dynamic_config_manager %}

    registrar.Parameter("dynamic_config_manager", &TThis::DynamicConfigManager)
        .DefaultNew();
    registrar.Parameter("dynamic_config_path", &TThis::DynamicConfigPath)
        .Optional();
{%- endif %}
}

////////////////////////////////////////////////////////////////////////////////

NYT::NOrm::NServer::NObjects::TObjectManagerConfigPtr TMasterDynamicConfig::GetObjectManagerConfig() const
{
    return ObjectManager;
}

NYT::NOrm::NServer::NAccessControl::TAccessControlManagerConfigPtr TMasterDynamicConfig::GetAccessControlManagerConfig() const
{
    return AccessControlManager;
}

void TMasterDynamicConfig::Register(TRegistrar registrar)
{
    NYT::NOrm::NServer::NMaster::TMasterDynamicConfig::DoRegister(registrar);

    registrar.UnrecognizedStrategy(NYT::NYTree::EUnrecognizedStrategy::KeepRecursive);

    registrar.Preprocessor([] (TThis* config) {
        config->DBName = DefaultDBName;
    });

    registrar.Parameter("object_manager", &TThis::ObjectManager)
        .DefaultNew();
    registrar.Parameter("access_control_manager", &TThis::AccessControlManager)
        .DefaultNew();
    registrar.Parameter("yt_connector", &TThis::YTConnector)
        .DefaultNew();
}

////////////////////////////////////////////////////////////////////////////////

} // {{ cpp_server_namespace }}
