// {{ autogen_marker }}
{%- import "/macros.proto.j2" as macros %}

#pragma once

#include "{{ object.snake_case_name }}.h"

{%- if database_options.enable_custom_base_type_handler %}
{##}
#include <{{ cpp_server_custom_base_type_handler_path }}>
{%- endif %}

#include <yt/yt/orm/server/access_control/access_control_manager.h>
#include <yt/yt/orm/server/master/public.h>
#include <yt/yt/orm/server/objects/public.h>
#include <yt/yt/orm/server/objects/type_handler_detail.h>

#include <memory>

namespace {{ cpp_objects_namespace }} {

using NYT::NOrm::NServer::NObjects::TObjectTypeHandlerBase;

////////////////////////////////////////////////////////////////////////////////
{%- set base_type_handler = 'TObjectTypeHandlerBase' %}
{%- if database_options.enable_custom_base_type_handler %}
{%- set base_type_handler = cpp_server_plugins_namespace + '::TObjectTypeHandlerBase' %}

static_assert(std::is_base_of<TObjectTypeHandlerBase, {{ base_type_handler }}>());
{%- endif %}

class T{{ object.camel_case_name }}TypeHandler
    : public {{ base_type_handler }}
{
    using TBase = {{ base_type_handler }};

public:
    T{{ object.camel_case_name }}TypeHandler(
        NYT::NOrm::NServer::NMaster::IBootstrap* bootstrap,
        NYT::NOrm::NServer::NObjects::TObjectManagerConfigPtr config);
    {%- if object.custom_type_handler %}
    virtual ~T{{ object.camel_case_name }}TypeHandler() = 0;
    {%- endif %}

    void Initialize() override;
    void PostInitialize() override;

    bool IsObjectNameSupported() const override;

    bool SkipStoreWithoutChanges() const override;

    bool ForceZeroKeyEvaluation() const override;

    std::vector<NYT::NOrm::NServer::NObjects::TWatchLog> GetWatchLogs() const override;

    const NYT::NYson::TProtobufMessageType* GetRootProtobufType() const override;

    const TDBFields& GetKeyFields() const override;

    NYT::NOrm::NClient::NObjects::TObjectKey GetNullKey() const override;

    const NYT::NOrm::NServer::NObjects::TDBTable* GetTable() const override;

    const NYT::NOrm::NServer::NObjects::TDBTable* GetParentsTable() const override;

{%- if object.parent %}
    NYT::NOrm::NClient::NObjects::TObjectTypeValue GetParentType() const override;

    const TDBFields& GetParentKeyFields() const override;

    NYT::NOrm::NServer::NObjects::TObject* GetParent(
        const NYT::NOrm::NServer::NObjects::TObject* object,
        std::source_location location = std::source_location::current()) override;
{%- endif %}
{% if object.access_control_parent %}

    NYT::NOrm::NClient::NObjects::TObjectTypeValue GetAccessControlParentType() const override;

    NYT::NOrm::NServer::NObjects::TObject* GetAccessControlParent(
        const NYT::NOrm::NServer::NObjects::TObject* object,
        std::source_location location = std::source_location::current()) override;

    void ScheduleAccessControlParentKeyLoad(
        const NYT::NOrm::NServer::NObjects::TObject* object) override;

    const TDBFields& GetAccessControlParentKeyFields() override;
{% endif %}
{%- if object.use_custom_default_acl %}
    std::vector<NYT::NOrm::NServer::NAccessControl::TAccessControlEntry> GetDefaultAcl() override;
{% endif %}
    std::unique_ptr<NYT::NOrm::NServer::NObjects::TObject> InstantiateObject(
        const NYT::NOrm::NClient::NObjects::TObjectKey& key,
        const NYT::NOrm::NClient::NObjects::TObjectKey& parentKey,
        NYT::NOrm::NServer::NObjects::ISession* session) override;

    void InitializeCreatedObject(
        NYT::NOrm::NServer::NObjects::TTransaction* transaction,
        NYT::NOrm::NServer::NObjects::TObject* object) override;

    void ValidateCreatedObject(
        NYT::NOrm::NServer::NObjects::TTransaction* transaction,
        NYT::NOrm::NServer::NObjects::TObject* object) override;

{%- if object.enable_tags %}
    bool AreTagsEnabled() const override;
{%- endif %}

{%- if yp_compatible %}
    const TDBField* GetAccountIdField() override;
{%- endif %}

protected:
    const NYT::NOrm::NServer::NObjects::TObjectManagerConfigPtr Config_;
    const TDBFields KeyFields_;
{%- if object.parent %}
    const TDBFields ParentKeyFields_;
{%- endif %}
{%- if object.access_control_parent %}
    const TDBFields AccessControlParentKeyFields_;
{%- endif %}
    const NYT::NOrm::NClient::NObjects::TObjectKey NullKey_;

    void ValidateMetaEtcOnTransactionCommit(
        NYT::NOrm::NServer::NObjects::TTransaction* transaction,
        const T{{ object.camel_case_name }}* object);

    void ValidateMetaEtcOnValueUpdate(
        NYT::NOrm::NServer::NObjects::TTransaction* transaction,
        const T{{ object.camel_case_name }}* object,
        const T{{ object.camel_case_name }}::TMetaEtc& metaEtcOld,
        const T{{ object.camel_case_name }}::TMetaEtc& metaEtcNew);

    void ValidateMetaUuid(
        const T{{ object.camel_case_name }}::TMetaEtc& metaEtcOld,
        const T{{ object.camel_case_name }}::TMetaEtc& metaEtcNew);

{%- if object.attribute_migrations %}

    void DoPrepareAttributeMigrations(
        NYT::NOrm::NServer::NObjects::TObject* object,
        const TBitSet<int>& attributeMigrations,
        const TBitSet<int>& forcedAttributeMigrations) override;

    void DoFinalizeAttributeMigrations(
        NYT::NOrm::NServer::NObjects::TObject* object,
        const TBitSet<int>& attributeMigrations,
        const TBitSet<int>& forcedAttributeMigrations) override;

    {%- for attribute_migration in object.attribute_migrations %}
    {%- if attribute_migration.custom_migrator %}

    virtual void DoPrepare{{ macros.attribute_camel_case_name(attribute_migration.source) }}To
        {{- macros.attribute_camel_case_name(attribute_migration.target) -}}
        Migration(T{{ object.camel_case_name }}* object) = 0;

    virtual void DoFinalize{{ macros.attribute_camel_case_name(attribute_migration.source) }}To
        {{- macros.attribute_camel_case_name(attribute_migration.target) -}}
        Migration(T{{ object.camel_case_name }}* object) = 0;

        {%- if attribute_migration.custom_reverse_writer %}
    virtual void DoReverse{{- macros.attribute_camel_case_name(attribute_migration.source) }}To
        {{- macros.attribute_camel_case_name(attribute_migration.target) -}}
        Migration(T{{ object.camel_case_name }}* object) = 0;

        {%- endif %}
    {%- endif %}
    {%- endfor %}
{%- endif %}
};

////////////////////////////////////////////////////////////////////////////////

} // {{ cpp_objects_namespace }}
