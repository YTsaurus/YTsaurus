// {{ autogen_marker }}
package {{ client_proto_package }};

{% if client_discovery_java_package -%}
option java_package = "{{ client_discovery_java_package }}";
option java_outer_classname = "Discovery";
{%- endif %}
{%- if client_go_api_package %}
option go_package = "{{ client_go_api_package }}";
{%- endif %}

////////////////////////////////////////////////////////////////////////////////

message TReqGetMasters
{ }

message TRspGetMasters
{
    message TMasterInfo
    {
        // FQDN without port.
        required string fqdn = 1;

        // Resolved from FQDN.
        optional string ip6_address = 7;

        // FQDN + GRPC port.
        // Can be passed to GRPC client to open a channel.
        required string grpc_address = 2;

        // IP6 + GRPC port.
        optional string grpc_ip6_address = 8;

        // FQDN + HTTP port.
        // Can be passed to HTTP client to open a channel.
        // Note that HTTP transport is not available for agents.
        optional string http_address = 6;

        // IP6 + HTTP port.
        optional string http_ip6_address = 9;

        // Address of the collocated RPC proxy if configured.
        optional string rpc_proxy_address = 10;
        optional string rpc_proxy_ip6_address = 11;

        // Per-cluster unique master instance tag.
        required uint32 instance_tag = 3;

        // Is this master considered alive?
        // If true the master is ready to serve the requests (both reads and writes).
        // If false the master is not usable in any way.
        required bool alive = 4;

        // Is this master leading?
        // Exactly one master is leading most of time.
        required bool leading = 5;
    }

    // All known masters (both dead and alive).
    repeated TMasterInfo master_infos = 1;

    // Globally-unique cluster tag.
    required int32 cluster_tag = 2;
}

////////////////////////////////////////////////////////////////////////////////

service DiscoveryService
{
    // Retrieves the list of all master servers.
    rpc GetMasters (TReqGetMasters) returns (TRspGetMasters);
}

////////////////////////////////////////////////////////////////////////////////
