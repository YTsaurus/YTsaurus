{%- macro line_break() -%}
{%- endmacro -%}

{%- macro print_comments(object) -%}
    {%- if object.description -%}
        {%- for line in object.description.leading_comments.splitlines() -%}
            {%- if line.count("/") < 80 %}
//{{line}}
            {%- endif %}
        {%- endfor -%}
    {%- endif -%}
{%- endmacro -%}

{%- macro import_public(name, yp_compatible) -%}
    {%- if yp_compatible -%}
import "{{ name }}";
    {%- else -%}
import public "{{ name }}";
    {%- endif -%}
{%- endmacro %}

{%- macro print_enum(enum) -%}
{{- print_comments(enum) }}
enum {{ enum.name }}
{
    {%- if enum.allow_alias %}
    option allow_alias = true;

    {%- endif %}
    {%- for value in enum.values_formatted %}
    {{- print_comments(value) | indent(4) }}
    {{ value.name }} = {{ value.number }}{{ value.options }};
    {%- endfor %}
    {%- if enum.reserved_numbers %}
    reserved {{ enum.reserved_ranges_formatted }};
    {%- endif %}
    {%- if enum.reserved_names %}
    reserved {{ enum.reserved_names_formatted }};
    {%- endif %}
}
{%- endmacro -%}

{%- macro print_message_options(message) -%}
    {%- for option in message.options %}
option {{ option }};
    {%- endfor %}
{%- endmacro -%}

{%- macro print_message_contents(message, proto3) -%}
    {{ print_message_options(message) | indent(4) }}
    {%- for nested_enum in message.nested_enums -%}
    {{ print_enum(nested_enum) | indent(4) }}
    {% endfor %}
    {%- for nested_message in message.nested_messages -%}
    {{ print_message(nested_message, proto3) | indent(4) }}
    {% endfor %}
    {%- if message.reserved_numbers %}
    reserved {{ message.reserved_ranges_formatted }};
    {%- endif %}
    {%- if message.reserved_names %}
    reserved {{ message.reserved_names_formatted }};
{{ line_break() }}
    {%- endif %}
    {%- for field in message.all_fields | rejectattr("deprecated") | rejectattr("in_oneof") -%}
    {{- print_comments(field) | indent(4) }}
    {{ field.label(proto3) }}{{ field.proto_type }} {{ field.snake_case_name }} = {{ field.number }}{{ field.options_formatted }};
    {%- endfor %}
    {%- for oneof_name, fields in message.oneofs.items() %}
    oneof {{ oneof_name }}
    {
    {%- for field in fields %}
        {{ field.proto_type }} {{ field.snake_case_name }} = {{ field.number }}{{ field.options_formatted }};
    {%- endfor %}
    }
    {%- endfor %}
{%- endmacro -%}

{%- macro print_message(message, proto3) -%}
{{- print_comments(message) }}
message {{ message.name }}
{
    {{- print_message_contents(message, proto3) }}
}
{%- endmacro %}


{%- macro print_access_control(acl_actions_enum, acl_permissions_enum, acl_entry_message, proto3) -%}
{{ print_enum(acl_actions_enum) }}
{{ print_enum(acl_permissions_enum) }}
{{ print_message(acl_entry_message, proto3) }}
{%- endmacro %}


{%- macro print_object_types_enum(objects, yp_compatible) %}
enum EObjectType
{
    {%- if not yp_compatible %}
    OT_NULL = 0
    [(NYT.NYson.NProto.enum_value_name) = "null"];
    {%- endif %}

    {%- for object in objects | sort(attribute='type_value') %}

    OT_{{ object.snake_case_name.upper() }} = {{ object.type_value }}
    [(NYT.NYson.NProto.enum_value_name) = "{{ object.snake_case_name }}"];
    {%- endfor %}

    {%- if yp_compatible %}
    OT_NULL = -1
    [(NYT.NYson.NProto.enum_value_name) = "null"];
    OT_NODE2 = 18
    [(NYT.NYson.NProto.enum_value_name) = "node2"];
    {%- endif %}
}
{%- endmacro %}

{%- macro attribute_camel_case_name(attribute) -%}
{% for field in attribute.fields %}{{ field.camel_case_name }}{% endfor %}
{%- endmacro -%}

{%- macro attribute_accessor(attribute) -%}
{% for field in attribute.prefix_fields %}
    {%- if loop.index != 0 and field.snake_case_name != "meta" -%}
    {{ field.camel_case_name }}().
    {%- endif -%}
{%- endfor %}
{%- if attribute.column_field.is_column -%}
    {{ attribute.column_field.cpp_camel_case_name }}()
{%- elif attribute.column_field.value_message.has_etc -%}
    {%- if attribute.column_field.value_message.cpp_object_field_name != "Meta" -%}
        {{ attribute.column_field.cpp_camel_case_name }}().Etc()
    {%- else -%}
        MetaEtc()
    {%- endif -%}
{%- endif -%}
{%- endmacro -%}

{%- macro mutable_attribute_suffix(attribute) -%}
{% for field in attribute.suffix_fields %}->mutable_{{ field.snake_case_name }}(){% endfor %}
{%- endmacro -%}

{%- macro attribute_suffix(attribute) -%}
{% for field in attribute.suffix_fields %}.{{ field.snake_case_name }}(){% endfor %}
{%- endmacro -%}

{%- macro set_attribute_suffix(attribute, value) -%}
{%- for field in attribute.suffix_fields -%}
{%- if not loop.last -%}
    ->mutable_{{ field.snake_case_name }}()
{%- else -%}
    ->set_{{ field.snake_case_name }}({{ value }})
{%- endif -%}
{%- endfor -%}
{%- endmacro -%}

{%- macro is_attribute_changed(attribute) -%}
{{ attribute_accessor(attribute) }}
{%- if attribute.suffix -%}
.IsChanged("{{ attribute.suffix }}")
{%- else -%}
.IsChanged()
{%- endif -%}
{%- endmacro -%}
