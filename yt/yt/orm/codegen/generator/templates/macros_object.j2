{%- import "/macros.proto.j2" as macros %}

{%- macro declare_object_key_traits(object, cpp_objects_namespace) -%}
template <>
struct TObjectKeyTraits<{{ cpp_objects_namespace }}::T{{ object.camel_case_name }}>
{
    using TTypes = std::tuple<
    {%- for field in object.key_fields %}
        {{ field.cpp_type }}{{ "," if not loop.last }}
    {%- endfor %}
    >;
};
{%- endmacro -%}

{%- macro declare_object_plugin_traits(object, cpp_objects_namespace, cpp_server_plugins_namespace) -%}
template <>
struct TObjectPluginTraits<{{ cpp_objects_namespace }}::T{{ object.camel_case_name }}>
{
    using TType = {{ cpp_server_plugins_namespace }}::T{{ object.camel_case_name}};

    static TType* Downcast({{ cpp_objects_namespace }}::T{{ object.camel_case_name }}* object);
};

template <>
struct TObjectPluginTraits<{{ cpp_server_plugins_namespace }}::T{{ object.camel_case_name }}>
{
    static {{ cpp_objects_namespace }}::T{{ object.camel_case_name}}* Upcast(
        {{ cpp_server_plugins_namespace }}::T{{ object.camel_case_name }}* object);
};
{%- endmacro -%}
