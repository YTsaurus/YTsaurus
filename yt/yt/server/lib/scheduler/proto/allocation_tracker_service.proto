syntax = "proto2";

package NYT.NScheduler.NProto.NNode;

import "yt/ytlib/scheduler/proto/allocation.proto";
import "yt/ytlib/scheduler/proto/job.proto";

import "yt_proto/yt/client/node_tracker_client/proto/node.proto";

import "yt_proto/yt/core/misc/proto/error.proto";

import "yt_proto/yt/core/misc/proto/guid.proto";

////////////////////////////////////////////////////////////////////////////////

message TControllerAgentDescriptor
{
    required NYT.NProto.TGuid incarnation_id = 1;
    optional NNodeTrackerClient.NProto.TAddressMap addresses = 2;
    optional string agent_id = 3;
}

message TSpecFetchFailedAllocationInfo
{
    required NYT.NProto.TGuid allocation_id = 1;
    required NYT.NProto.TGuid operation_id = 2;
    required NYT.NProto.TError error = 3;
}

// Informs Allocation Tracker about node status and requests orders.
message TReqHeartbeat
{
    required int32 node_id = 1;
    required NNodeTrackerClient.NProto.TNodeDescriptor node_descriptor = 2;
    required NNodeTrackerClient.NProto.TNodeResources resource_usage = 3;
    required NNodeTrackerClient.NProto.TNodeResources resource_limits = 4;
    repeated TAllocationStatus allocations = 5;

    required NNodeTrackerClient.NProto.TDiskResources disk_resources = 6;

    // TODO(pogorelov): Replace it with profiling metrics.
    optional int32 job_reporter_write_failures_count = 7;
    optional bool job_reporter_queue_is_too_large = 8;

    repeated NYT.NProto.TGuid operations_ids_to_request_info = 11;

    repeated TSpecFetchFailedAllocationInfo spec_fetch_failed_allocations = 12;

    repeated TControllerAgentDescriptor registered_controller_agents = 13;

    reserved 9, 10;
}

message TAllocationStartInfo
{
    required NYT.NProto.TGuid allocation_id = 1;
    required NYT.NProto.TGuid operation_id = 2;
    // Resource limits as predicted by the controller.
    required NNodeTrackerClient.NProto.TNodeResources resource_limits = 3;

    required TControllerAgentDescriptor controller_agent_descriptor = 4;
}

message TAllocationToAbort
{
    required NYT.NProto.TGuid allocation_id = 1;
    optional int32 abort_reason = 2;
    optional string preemption_reason = 3;
}

message TAllocationToInterrupt
{
    required NYT.NProto.TGuid allocation_id = 1;
    required int64 timeout = 2;
    optional string preemption_reason = 3;
    optional int32 interruption_reason = 4; // NScheduler::EInterruptReason
    optional NYT.NScheduler.NProto.TPreemptedFor preempted_for = 5;
}

message TOperationInfo
{
    required NYT.NProto.TGuid operation_id = 1;
    required bool running = 2;

    optional TControllerAgentDescriptor controller_agent_descriptor = 3;
}

message TRspHeartbeat
{
    repeated TAllocationStartInfo allocations_to_start = 1;
    repeated TAllocationToAbort allocations_to_abort = 2;
    repeated TAllocationToInterrupt allocations_to_interrupt = 3;
    optional bool scheduling_skipped = 4;
    optional int32 operation_archive_version = 5;

    repeated TOperationInfo operation_infos = 10;

    optional bool registered_controller_agents_sent = 13 [default = true];
    repeated TControllerAgentDescriptor registered_controller_agents = 11;

    optional TJobResources min_spare_resources = 12;

    reserved 6, 7, 8;
}

////////////////////////////////////////////////////////////////////////////////
