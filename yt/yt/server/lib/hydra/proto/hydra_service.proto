syntax = "proto2";

package NYT.NHydra.NProto;

import "yt_proto/yt/core/misc/proto/guid.proto";

////////////////////////////////////////////////////////////////////////////////

message TReqReadChangeLog
{
    required int32 changelog_id = 1;
    required int32 start_record_id = 2;
    required int32 record_count = 3;
}

message TRspReadChangeLog
{
    // Changelog records are passed in the attachment and are packed with PackRefs.
}

////////////////////////////////////////////////////////////////////////////////

message TReqLookupChangelog
{
    required int32 changelog_id = 1;
}

message TRspLookupChangelog
{
    optional int32 record_count = 2;
}

////////////////////////////////////////////////////////////////////////////////

message TReqPingFollower
{
    required NYT.NProto.TGuid epoch_id = 1;
    optional int64 committed_revision = 2;
    required int64 ping_revision = 3;
    repeated int32 alive_peer_ids = 4;
}

message TRspPingFollower
{
    required int32 state = 1; // EPeerState
}

////////////////////////////////////////////////////////////////////////////////

message TReqAcceptMutations
{
    required NYT.NProto.TGuid epoch_id = 1;
    required int64 start_revision = 2;
    required int64 committed_revision = 3;
    // Records data is passed via attachments.
}

message TRspAcceptMutations
{
    required bool logged = 1;
}

////////////////////////////////////////////////////////////////////////////////

message TReqBuildSnapshot
{
    required NYT.NProto.TGuid epoch_id = 1;
    required uint64 revision = 2;
    optional bool set_read_only = 3 [default = false];
}

message TRspBuildSnapshot
{
    required uint64 checksum = 1;
}

////////////////////////////////////////////////////////////////////////////////

message TReqRotateChangelog
{
    required NYT.NProto.TGuid epoch_id = 1;
    required uint64 revision = 2;
}

message TRspRotateChangelog
{
    optional bool rotated = 1;
}

////////////////////////////////////////////////////////////////////////////////

message TReqSyncWithLeader
{
    required NYT.NProto.TGuid epoch_id = 1;
}

message TRspSyncWithLeader
{
    required int64 committed_revision = 1;
}

////////////////////////////////////////////////////////////////////////////////

message TReqCommitMutation
{
    required string type = 1;
    optional NYT.NProto.TGuid mutation_id = 2;
    optional bool retry = 3 [default = false];
    optional int32 reign = 4 [default = 0];
    // Request data is passed via attachment.
}

message TRspCommitMutation
{
    // Response data is passed via attachments.
}

////////////////////////////////////////////////////////////////////////////////

message TReqAbandonLeaderLease
{
    required int32 peer_id = 2;

    reserved 1;
}

message TRspAbandonLeaderLease
{
    optional bool abandoned = 2;

    reserved 1;
}

////////////////////////////////////////////////////////////////////////////////

message TReqReportMutationsStateHashes
{
    message TMutationInfo
    {
        required int64 sequence_number = 1;
        required uint64 state_hash = 2;
    }

    repeated TMutationInfo mutations_info = 1;
}

message TRspReportMutationsStateHashes
{ }

////////////////////////////////////////////////////////////////////////////////
