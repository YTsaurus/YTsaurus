package NYT.NOrm.NDataModel;

import "yt_proto/yt/orm/client/proto/object.proto";
import "yt_proto/yt/orm/data_model/semaphore.proto";

import "yt_proto/yt/core/yson/proto/protobuf_interop.proto";

option java_package = "ru.yandex.yt.yt_proto.yt.orm.data_model";
option go_package = "go.ytsaurus.tech/yt/yt_proto/yt/orm/data_model";

option (NYT.NOrm.NClient.NProto.do_not_export) = true;

////////////////////////////////////////////////////////////////////////////////

option (NYT.NOrm.NClient.NProto.object_type) = {
    builtin_object: true
    camel_case_name: "SemaphoreSet"
    snake_case_name: "semaphore_set"
    primary_key: ["id"]
    type_value: 259
    hash_policy: HP_NO_HASH_COLUMN
    nested_object_field_messages: false
    revision_trackers: [
        {
            tracked_paths: ["/spec", "/meta", "/status"]
            disabled: true
        }
    ]
};

message TSemaphoreSetMetaBase
{
    optional string id = 1 [
        (NYT.NOrm.NClient.NProto.generation_policy) = GP_RANDOM,
        (NYT.NOrm.NClient.NProto.column) = true,
        (NYT.NOrm.NClient.NProto.storage_type) = "string"
    ];
}

message TSemaphoreLeasesByUuid
{
    map<string, TSemaphoreLease> values = 1 [(NYT.NYson.NProto.yson_map) = true];
}

message TSemaphoreSetStatusBase
{
    option (NYT.NOrm.NClient.NProto.no_etc_column_suffix) = true;

    // <semaphore id> -> (<lease uuid> -> <lease>)
    map<string, TSemaphoreLeasesByUuid> fresh_leases_by_semaphore = 1 [
        (NYT.NOrm.NClient.NProto.computed) = true,
        (NYT.NOrm.NClient.NProto.opaque) = true,
        (NYT.NYson.NProto.yson_map) = true];
}

message TSemaphoreSetSpec
{
    option (NYT.NOrm.NClient.NProto.no_etc_column_suffix) = true;
    option (NYT.NOrm.NClient.NProto.in_place) = true;

    // Default duration of lease, if not specified in acquire/ping control methods, in milliseconds.
    optional uint64 default_duration = 1;
}

message TSemaphoreSetAcquire
{
    optional string lease_uuid = 1;

    // Duration of lease, in milliseconds.
    optional uint64 duration = 2;

    // Quantity to withdraw from budget, default is 1.
    optional uint64 budget = 3;
}

message TSemaphoreSetPing
{
    optional string lease_uuid = 1;

    // Duration of lease, in milliseconds.
    optional uint64 duration = 2;
}

message TSemaphoreSetRelease
{
    optional string lease_uuid = 1;
}

message TSemaphoreSetControlBase
{
    optional TSemaphoreSetAcquire acquire = 1;
    optional TSemaphoreSetPing ping = 2;
    optional TSemaphoreSetRelease release = 3;
}

////////////////////////////////////////////////////////////////////////////////
