on:
  workflow_call:
    inputs:
      runs-on-value:
        required: true
        type: string
      build-strawberry:
        default: false
        required: false
        type: boolean
      build-ytsaurus:
        default: false
        required: false
        type: boolean
      build-ytsaurus-ya-make:
        default: false
        required: false
        type: boolean
      build-chyt:
        default: false
        required: false
        type: boolean
      build-query-tracker:
        default: false
        required: false
        type: boolean
      build-query-tracker-ya-make-relwithdebinfo:
        default: false
        required: false
        type: boolean
      build-query-tracker-ya-make-release:
        default: false
        required: false
        type: boolean
      build-python:
        default: false
        required: false
        type: boolean

jobs:
  build:
    runs-on: ${{ inputs.runs-on-value }}
    timeout-minutes: 480
    steps:
      - name: Prepare python virtual environment
        run: |
          python3.11 -m venv ../venv

      - name: Build strawberry controller
        if: ${{ inputs.build-strawberry }}
        run: |
          cd ../ytsaurus/ytsaurus/yt/chyt/controller/cmd/chyt-controller
          export HOME=${RUNNER_WORKSPACE}
          /opt/go/bin/go build

      - name: Configure ytsaurus
        if: ${{ inputs.build-ytsaurus || inputs.build-chyt || inputs.build-query-tracker || inputs.build-python }}
        run: |
          mkdir -p ../build
          cd ../build
          rm -rf *
          cmake \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE=../ytsaurus/ytsaurus/clang.toolchain \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DREQUIRED_LLVM_TOOLING_VERSION=16 \
            ../ytsaurus/ytsaurus

      - name: Configure ytsaurus (relwithdebinfo)
        if: ${{ inputs.build-ytsaurus || inputs.build-chyt || inputs.build-query-tracker }}
        run: |
          mkdir -p ../build_relwithdebinfo
          cd ../build_relwithdebinfo
          rm -rf *
          cmake \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCMAKE_TOOLCHAIN_FILE=../ytsaurus/ytsaurus/clang.toolchain \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DREQUIRED_LLVM_TOOLING_VERSION=16 \
            ../ytsaurus/ytsaurus

      - name: Configure query tracker
        if: ${{ inputs.build-query-tracker }}
        run: |
          #TODO: install it inside vm image.
          sudo apt-get -y install antlr3 libaio1 libaio-dev

          #TODO: remove -DMKQL_DISABLE_CODEGEN after YT-19852.
          mkdir -p ../build_qt
          cd ../build_qt
          rm -rf *
          cmake \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER_LAUNCHER=/usr/local/bin/ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=/usr/local/bin/ccache \
            -DCMAKE_TOOLCHAIN_FILE=../ytsaurus/ydb/clang.toolchain \
            -DCMAKE_C_FLAGS_RELEASE="-O2 -UNDEBUG -DMKQL_DISABLE_CODEGEN" \
            -DCMAKE_CXX_FLAGS_RELEASE="-O2 -UNDEBUG -DMKQL_DISABLE_CODEGEN" \
            -DCMAKE_C_FLAGS="-O2 -UNDEBUG -DMKQL_DISABLE_CODEGEN" \
            -DCMAKE_CXX_FLAGS="-O2 -UNDEBUG -DMKQL_DISABLE_CODEGEN" \
            -DCMAKE_POSITION_INDEPENDENT_CODE=On \
            ../ytsaurus/ydb

      - name: Configure query tracker (relwithdebinfo)
        if: ${{ inputs.build-query-tracker }}
        run: |
          mkdir -p ../build_qt_relwithdebinfo
          cd ../build_qt_relwithdebinfo
          rm -rf *
          cmake \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCMAKE_C_COMPILER_LAUNCHER=/usr/local/bin/ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=/usr/local/bin/ccache \
            -DCMAKE_TOOLCHAIN_FILE=../ytsaurus/ydb/clang.toolchain \
            -DCMAKE_C_FLAGS="-O2 -UNDEBUG -DMKQL_DISABLE_CODEGEN" \
            -DCMAKE_CXX_FLAGS="-O2 -UNDEBUG -DMKQL_DISABLE_CODEGEN" \
            -DCMAKE_C_FLAGS_RELWITHDEBINFO="-O2 -UNDEBUG -DMKQL_DISABLE_CODEGEN" \
            -DCMAKE_CXX_FLAGS_RELWITHDEBINFO="-O2 -UNDEBUG -DMKQL_DISABLE_CODEGEN" \
            -DCMAKE_POSITION_INDEPENDENT_CODE=On \
            ../ytsaurus/ydb

      - name: Build ytsaurus
        if: ${{ inputs.build-ytsaurus || inputs.build-chyt || inputs.build-query-tracker || inputs.build-python }}
        run: |
          export CCACHE_BASEDIR="$(realpath ..)"
          export CCACHE_REMOTE_ONLY=true
          export CCACHE_REMOTE_STORAGE="${{ vars.CCACHE_REMOTE_STORAGE }}"

          cd ../build
          ninja

      - name: Build ytsaurus (relwithdebinfo)
        if: ${{ inputs.build-ytsaurus || inputs.build-chyt || inputs.build-query-tracker }}
        run: |
          export CCACHE_BASEDIR="$(realpath ..)"
          export CCACHE_REMOTE_ONLY=true
          export CCACHE_REMOTE_STORAGE="${{ vars.CCACHE_REMOTE_STORAGE }}"

          cd ../build_relwithdebinfo
          ninja ytserver-all

      - name: Build ytsaurus (ya make, relwithdebinfo)
        if: ${{ inputs.build-ytsaurus-ya-make }}
        run: |
          mkdir -p ../test_ya_build
          cd ../test_ya_build
          rm -rf *

          # Check build.
          ../ytsaurus/ytsaurus/ya make -T --build=relwithdebinfo -DSTRIP=yes --output=. ../ytsaurus/ytsaurus/yt/yt
          # Check python tests.
          ../ytsaurus/ytsaurus/ya make -T --build=relwithdebinfo -DSTRIP=yes --output=. ../ytsaurus/ytsaurus/yt/python/yt/wrapper/tests --run-all-tests -F "*test_get_set_exists*"
          # Check integration tests.
          ../ytsaurus/ytsaurus/ya make -T --build=relwithdebinfo -DSTRIP=yes --output=. ../ytsaurus/ytsaurus/yt/yt/tests/integration/scheduler --run-all-tests -F "*TestMultipleSchedulers*"

      - name: Build query tracker (ya make, relwithdebinfo)
        if: ${{ inputs.build-query-tracker-ya-make-relwithdebinfo }}
        run: |
          mkdir -p ../ya_build
          cd ../ya_build
          rm -rf *

          ../ytsaurus/ytsaurus/ya make -T --build=relwithdebinfo --output=. ../ytsaurus/ytsaurus/yt/yt/server/all

      - name: Build query tracker (ya make, release)
        if: ${{ inputs.build-query-tracker-ya-make-release }}
        run: |
          mkdir -p ../ya_build_release
          cd ../ya_build_release
          rm -rf *

          ../ytsaurus/ytsaurus/ya make -T --build=release -DSTRIP=yes --output=. ../ytsaurus/ytsaurus/yt/yt/server/all

      - name: Build chyt
        if: ${{ inputs.build-chyt }}
        run: |
          export CCACHE_BASEDIR="$(realpath ..)"
          export CCACHE_REMOTE_ONLY=true
          export CCACHE_REMOTE_STORAGE="${{ vars.CCACHE_REMOTE_STORAGE }}"

          cd ../build_relwithdebinfo
          ninja ytserver-clickhouse

      - name: Build yql agent
        if: ${{ inputs.build-query-tracker }}
        run: |
          export CCACHE_BASEDIR="$(realpath ..)"
          export CCACHE_REMOTE_ONLY=true
          export CCACHE_REMOTE_STORAGE="${{ vars.CCACHE_REMOTE_STORAGE }}"

          for dir in build_qt build_qt_relwithdebinfo ; do
              cd ../${dir}
              ninja libcompress_udf.so
              ninja libdatetime2_udf.so
              ninja libdigest_udf.so
              ninja libdsv_udf.so
              ninja libfile_udf.so
              ninja libhistogram_udf.so
              ninja libhyperloglog_udf.so
              ninja libhyperscan_udf.so
              ninja libip_udf.so
              ninja libjson2_udf.so
              ninja libjson_udf.so
              ninja libmath_udf.so
              ninja libpire_udf.so
              ninja libprotobuf_udf.so
              ninja libre2_udf.so
              ninja libset_udf.so
              ninja libstat_udf.so
              ninja libstreaming_udf.so
              ninja libstring_udf.so
              ninja libtopfreq_udf.so
              ninja libtop_udf.so
              ninja libunicode_udf.so
              ninja liburl_udf.so
              ninja libyqlplugin.so
              ninja libyson2_udf.so
              ninja mrjob
          done

          cd ../build_relwithdebinfo
          ninja ytserver-yql-agent

      - name: Build yql agent (ya make)
        if: ${{ inputs.build-query-tracker-ya-make-relwithdebinfo || inputs.build-query-tracker-ya-make-release }}
        run: |
          shopt -s expand_aliases
          alias ydb-ya-make="../ytsaurus/ydb/ya make -T --ignore-recurses --output=."

          build_types=()
          strip_flags=()
          yqla_output_dirs=()
          ydb_output_dirs=()

          if ${{ inputs.build-query-tracker-ya-make-relwithdebinfo }}; then
            build_types+=(relwithdebinfo)
            yqla_output_dirs+=(ya_build)
            strip_flags+=(no)
            ydb_output_dirs+=(build_qt_ya_make)
          fi

          if ${{ inputs.build-query-tracker-ya-make-release }}; then
            build_types+=(release)
            yqla_output_dirs+=(ya_build_release)
            strip_flags+=(yes)
            ydb_output_dirs+=(build_qt_ya_make_release)
          fi

          for i in ${!build_types[@]}; do
            mkdir -p ../${ydb_output_dirs[$i]}
            cd ../${ydb_output_dirs[$i]}
            rm -rf *

            ../ytsaurus/ytsaurus/ya make -T --build=${build_types[$i]} -DSTRIP=${strip_flags[$i]} --output=../${yqla_output_dirs[$i]} ../ytsaurus/ytsaurus/yt/yql/agent/bin

            ydb-ya-make --build=${build_types[$i]} -DSTRIP=${strip_flags[$i]}  ../ytsaurus/ydb/ydb/library/yql/tools/mrjob
            ydb-ya-make --build=${build_types[$i]} -DSTRIP=${strip_flags[$i]}  ../ytsaurus/ydb/ydb/library/yql/yt/dynamic

            ydb-ya-make --build=${build_types[$i]} -DSTRIP=${strip_flags[$i]}  ../ytsaurus/ydb/ydb/library/yql/yt/dq_vanilla_job
            ydb-ya-make --build=${build_types[$i]} -DSTRIP=${strip_flags[$i]}  ../ytsaurus/ydb/ydb/library/yql/yt/dq_vanilla_job.lite

            udfs_prefix="../ytsaurus/ydb/ydb/library/yql/udfs/common"
            ydb-ya-make --build=${build_types[$i]} -DSTRIP=${strip_flags[$i]}  ${udfs_prefix}/compress_base
            ydb-ya-make --build=${build_types[$i]} -DSTRIP=${strip_flags[$i]}  ${udfs_prefix}/datetime2
            ydb-ya-make --build=${build_types[$i]} -DSTRIP=${strip_flags[$i]}  ${udfs_prefix}/digest
            ydb-ya-make --build=${build_types[$i]} -DSTRIP=${strip_flags[$i]}  ${udfs_prefix}/file
            ydb-ya-make --build=${build_types[$i]} -DSTRIP=${strip_flags[$i]}  ${udfs_prefix}/histogram
            ydb-ya-make --build=${build_types[$i]} -DSTRIP=${strip_flags[$i]}  ${udfs_prefix}/hyperloglog
            ydb-ya-make --build=${build_types[$i]} -DSTRIP=${strip_flags[$i]}  ${udfs_prefix}/hyperscan
            ydb-ya-make --build=${build_types[$i]} -DSTRIP=${strip_flags[$i]}  ${udfs_prefix}/ip_base
            ydb-ya-make --build=${build_types[$i]} -DSTRIP=${strip_flags[$i]}  ${udfs_prefix}/json
            ydb-ya-make --build=${build_types[$i]} -DSTRIP=${strip_flags[$i]}  ${udfs_prefix}/json2
            ydb-ya-make --build=${build_types[$i]} -DSTRIP=${strip_flags[$i]}  ${udfs_prefix}/math
            ydb-ya-make --build=${build_types[$i]} -DSTRIP=${strip_flags[$i]}  ${udfs_prefix}/pire
            ydb-ya-make --build=${build_types[$i]} -DSTRIP=${strip_flags[$i]}  ${udfs_prefix}/protobuf
            ydb-ya-make --build=${build_types[$i]} -DSTRIP=${strip_flags[$i]}  ${udfs_prefix}/re2
            ydb-ya-make --build=${build_types[$i]} -DSTRIP=${strip_flags[$i]}  ${udfs_prefix}/set
            ydb-ya-make --build=${build_types[$i]} -DSTRIP=${strip_flags[$i]}  ${udfs_prefix}/stat
            ydb-ya-make --build=${build_types[$i]} -DSTRIP=${strip_flags[$i]}  ${udfs_prefix}/streaming
            ydb-ya-make --build=${build_types[$i]} -DSTRIP=${strip_flags[$i]}  ${udfs_prefix}/string
            ydb-ya-make --build=${build_types[$i]} -DSTRIP=${strip_flags[$i]}  ${udfs_prefix}/top
            ydb-ya-make --build=${build_types[$i]} -DSTRIP=${strip_flags[$i]}  ${udfs_prefix}/topfreq
            ydb-ya-make --build=${build_types[$i]} -DSTRIP=${strip_flags[$i]}  ${udfs_prefix}/unicode_base
            ydb-ya-make --build=${build_types[$i]} -DSTRIP=${strip_flags[$i]}  ${udfs_prefix}/url_base
            ydb-ya-make --build=${build_types[$i]} -DSTRIP=${strip_flags[$i]}  ${udfs_prefix}/yson2

            ydb-ya-make --build=${build_types[$i]} -DSTRIP=${strip_flags[$i]}  ../ytsaurus/ydb/ydb/library/yql/udfs/logs/dsv
          done

      - name: Build Python packages
        if: ${{ inputs.build-python }}
        run: |
          source ../venv/bin/activate
          YTSAURUS_COMMIT_HASH=${GITHUB_SHA} bash ./ytsaurus/yt/python/packages/build_ytsaurus_packages.sh --ytsaurus-source-path $(pwd)/ytsaurus --ytsaurus-build-path ../build
